//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the LeanFT Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace SIFTTest
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the LeanFT Application Model code generator.", "12.54")]
	public class FlightModel : AppModelBase
	{
		#region Constructors

		public FlightModel()
		{
			Name = @"FlightModel";
			HPMyFlightSampleApplicationWindow = new HPMyFlightSampleApplicationWindowNode(this);
			RebuildDescriptions();
			
		}

		public FlightModel(ITestObject contextTestObject)
		{
			Name = @"FlightModel";
			HPMyFlightSampleApplicationWindow = new HPMyFlightSampleApplicationWindowNode(contextTestObject, this);
			RebuildDescriptions();
			
		}

		#endregion

		#region Test Objects
	
		public HPMyFlightSampleApplicationWindowNode HPMyFlightSampleApplicationWindow { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class HPMyFlightSampleApplicationWindowNode : WPF.WindowNodeBase
		{
			#region Constructors
		
			public HPMyFlightSampleApplicationWindowNode(AppModelBase applicationModel) : base(applicationModel)
			{
				AgentNameEditField = new AgentNameEditFieldNode(this, applicationModel);
				WpfImage = new WpfImageNode(this, applicationModel);
				PasswordEditField = new PasswordEditFieldNode(this, applicationModel);
				WpfImage1 = new WpfImage1Node(this, applicationModel);
				CancelButton = new CancelButtonNode(this, applicationModel);
				WpfButton = new WpfButtonNode(this, applicationModel);
				WpfTabStrip = new WpfTabStripNode(this, applicationModel);
				FromCityComboBox = new FromCityComboBoxNode(this, applicationModel);
				ToCityComboBox = new ToCityComboBoxNode(this, applicationModel);
				DatePickerCalendar = new DatePickerCalendarNode(this, applicationModel);
				WpfImage2 = new WpfImage2Node(this, applicationModel);
				WpfObjectUiObject = new WpfObjectUiObjectNode(this, applicationModel);
				ClassUiObject = new ClassUiObjectNode(this, applicationModel);
				TicketsUiObject = new TicketsUiObjectNode(this, applicationModel);
				ClassComboBox = new ClassComboBoxNode(this, applicationModel);
				WpfImage3 = new WpfImage3Node(this, applicationModel);
				NumOfTicketsComboBox = new NumOfTicketsComboBoxNode(this, applicationModel);
				WpfImage4 = new WpfImage4Node(this, applicationModel);
				SeattleToSanFranciscoAllInclusiveUiObject = new SeattleToSanFranciscoAllInclusiveUiObjectNode(this, applicationModel);
				FromUiObject = new FromUiObjectNode(this, applicationModel);
				UiObject = new UiObjectNode(this, applicationModel);
				UiObject1 = new UiObject1Node(this, applicationModel);
				HelloUiObject = new HelloUiObjectNode(this, applicationModel);
				JohnSmithUiObject = new JohnSmithUiObjectNode(this, applicationModel);
				FlightsDataGridTable = new FlightsDataGridTableNode(this, applicationModel);
				WpfObjectUiObject1 = new WpfObjectUiObject1Node(this, applicationModel);
				WpfButton1 = new WpfButton1Node(this, applicationModel);
				ProgBarProgressBar = new ProgBarProgressBarNode(this, applicationModel);
				OKButton = new OKButtonNode(this, applicationModel);
				LoginFailedDialog = new LoginFailedDialogNode(this, applicationModel);
				DisplayName = @"HP MyFlight Sample Application";
			}
		
			public HPMyFlightSampleApplicationWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				AgentNameEditField = new AgentNameEditFieldNode(this, applicationModel);
				WpfImage = new WpfImageNode(this, applicationModel);
				PasswordEditField = new PasswordEditFieldNode(this, applicationModel);
				WpfImage1 = new WpfImage1Node(this, applicationModel);
				CancelButton = new CancelButtonNode(this, applicationModel);
				WpfButton = new WpfButtonNode(this, applicationModel);
				WpfTabStrip = new WpfTabStripNode(this, applicationModel);
				FromCityComboBox = new FromCityComboBoxNode(this, applicationModel);
				ToCityComboBox = new ToCityComboBoxNode(this, applicationModel);
				DatePickerCalendar = new DatePickerCalendarNode(this, applicationModel);
				WpfImage2 = new WpfImage2Node(this, applicationModel);
				WpfObjectUiObject = new WpfObjectUiObjectNode(this, applicationModel);
				ClassUiObject = new ClassUiObjectNode(this, applicationModel);
				TicketsUiObject = new TicketsUiObjectNode(this, applicationModel);
				ClassComboBox = new ClassComboBoxNode(this, applicationModel);
				WpfImage3 = new WpfImage3Node(this, applicationModel);
				NumOfTicketsComboBox = new NumOfTicketsComboBoxNode(this, applicationModel);
				WpfImage4 = new WpfImage4Node(this, applicationModel);
				SeattleToSanFranciscoAllInclusiveUiObject = new SeattleToSanFranciscoAllInclusiveUiObjectNode(this, applicationModel);
				FromUiObject = new FromUiObjectNode(this, applicationModel);
				UiObject = new UiObjectNode(this, applicationModel);
				UiObject1 = new UiObject1Node(this, applicationModel);
				HelloUiObject = new HelloUiObjectNode(this, applicationModel);
				JohnSmithUiObject = new JohnSmithUiObjectNode(this, applicationModel);
				FlightsDataGridTable = new FlightsDataGridTableNode(this, applicationModel);
				WpfObjectUiObject1 = new WpfObjectUiObject1Node(this, applicationModel);
				WpfButton1 = new WpfButton1Node(this, applicationModel);
				ProgBarProgressBar = new ProgBarProgressBarNode(this, applicationModel);
				OKButton = new OKButtonNode(this, applicationModel);
				LoginFailedDialog = new LoginFailedDialogNode(this, applicationModel);
				DisplayName = @"HP MyFlight Sample Application";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.WPF.WindowDescription CreateDescription()
			{
				return new HP.LFT.SDK.WPF.WindowDescription
				{
					ObjectName = @"HP MyFlight Sample Application",
					FullType = @"window",
					WindowTitleRegExp = @"HP MyFlight Sample Application"
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public AgentNameEditFieldNode AgentNameEditField { get; private set; }
			public WpfImageNode WpfImage { get; private set; }
			public PasswordEditFieldNode PasswordEditField { get; private set; }
			public WpfImage1Node WpfImage1 { get; private set; }
			public CancelButtonNode CancelButton { get; private set; }
			public WpfButtonNode WpfButton { get; private set; }
			public WpfTabStripNode WpfTabStrip { get; private set; }
			public FromCityComboBoxNode FromCityComboBox { get; private set; }
			public ToCityComboBoxNode ToCityComboBox { get; private set; }
			public DatePickerCalendarNode DatePickerCalendar { get; private set; }
			public WpfImage2Node WpfImage2 { get; private set; }
			public WpfObjectUiObjectNode WpfObjectUiObject { get; private set; }
			public ClassUiObjectNode ClassUiObject { get; private set; }
			public TicketsUiObjectNode TicketsUiObject { get; private set; }
			public ClassComboBoxNode ClassComboBox { get; private set; }
			public WpfImage3Node WpfImage3 { get; private set; }
			public NumOfTicketsComboBoxNode NumOfTicketsComboBox { get; private set; }
			public WpfImage4Node WpfImage4 { get; private set; }
			public SeattleToSanFranciscoAllInclusiveUiObjectNode SeattleToSanFranciscoAllInclusiveUiObject { get; private set; }
			public FromUiObjectNode FromUiObject { get; private set; }
			public UiObjectNode UiObject { get; private set; }
			public UiObject1Node UiObject1 { get; private set; }
			public HelloUiObjectNode HelloUiObject { get; private set; }
			public JohnSmithUiObjectNode JohnSmithUiObject { get; private set; }
			public FlightsDataGridTableNode FlightsDataGridTable { get; private set; }
			public WpfObjectUiObject1Node WpfObjectUiObject1 { get; private set; }
			public WpfButton1Node WpfButton1 { get; private set; }
			public ProgBarProgressBarNode ProgBarProgressBar { get; private set; }
			public OKButtonNode OKButton { get; private set; }
			public LoginFailedDialogNode LoginFailedDialog { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class AgentNameEditFieldNode : WPF.EditFieldNodeBase
			{
				#region Constructors
			
				public AgentNameEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"agentName";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.EditFieldDescription
					{
						ObjectName = @"agentName"
					};
				}
			
				#endregion
			
			}

			public sealed class WpfImageNode : WPF.ImageNodeBase
			{
				#region Constructors
			
				public WpfImageNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfImage";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ImageDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ImageDescription();
				}
			
				#endregion
			
			}

			public sealed class PasswordEditFieldNode : WPF.EditFieldNodeBase
			{
				#region Constructors
			
				public PasswordEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"password";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.EditFieldDescription
					{
						ObjectName = @"password"
					};
				}
			
				#endregion
			
			}

			public sealed class WpfImage1Node : WPF.ImageNodeBase
			{
				#region Constructors
			
				public WpfImage1Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfImage1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ImageDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ImageDescription();
				}
			
				#endregion
			
			}

			public sealed class CancelButtonNode : WPF.ButtonNodeBase
			{
				#region Constructors
			
				public CancelButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Cancel";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription();
				}
			
				#endregion
			
			}

			public sealed class WpfButtonNode : WPF.ButtonNodeBase
			{
				#region Constructors
			
				public WpfButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfButton";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription();
				}
			
				#endregion
			
			}

			public sealed class WpfTabStripNode : WPF.TabStripNodeBase
			{
				#region Constructors
			
				public WpfTabStripNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfTabStrip";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.TabStripDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.TabStripDescription();
				}
			
				#endregion
			
			}

			public sealed class FromCityComboBoxNode : WPF.ComboBoxNodeBase
			{
				#region Constructors
			
				public FromCityComboBoxNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"fromCity";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ComboBoxDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ComboBoxDescription();
				}
			
				#endregion
			
			}

			public sealed class ToCityComboBoxNode : WPF.ComboBoxNodeBase
			{
				#region Constructors
			
				public ToCityComboBoxNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"toCity";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ComboBoxDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ComboBoxDescription();
				}
			
				#endregion
			
			}

			public sealed class DatePickerCalendarNode : WPF.CalendarNodeBase
			{
				#region Constructors
			
				public DatePickerCalendarNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"datePicker";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.CalendarDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.CalendarDescription();
				}
			
				#endregion
			
			}

			public sealed class WpfImage2Node : WPF.ImageNodeBase
			{
				#region Constructors
			
				public WpfImage2Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfImage2";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ImageDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ImageDescription();
				}
			
				#endregion
			
			}

			public sealed class WpfObjectUiObjectNode : WPF.UiObjectNodeBase
			{
				#region Constructors
			
				public WpfObjectUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfObject";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription();
				}
			
				#endregion
			
			}

			public sealed class ClassUiObjectNode : WPF.UiObjectNodeBase
			{
				#region Constructors
			
				public ClassUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Class";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription();
				}
			
				#endregion
			
			}

			public sealed class TicketsUiObjectNode : WPF.UiObjectNodeBase
			{
				#region Constructors
			
				public TicketsUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Tickets";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription();
				}
			
				#endregion
			
			}

			public sealed class ClassComboBoxNode : WPF.ComboBoxNodeBase
			{
				#region Constructors
			
				public ClassComboBoxNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Class";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ComboBoxDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ComboBoxDescription();
				}
			
				#endregion
			
			}

			public sealed class WpfImage3Node : WPF.ImageNodeBase
			{
				#region Constructors
			
				public WpfImage3Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfImage3";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ImageDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ImageDescription();
				}
			
				#endregion
			
			}

			public sealed class NumOfTicketsComboBoxNode : WPF.ComboBoxNodeBase
			{
				#region Constructors
			
				public NumOfTicketsComboBoxNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"numOfTickets";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ComboBoxDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ComboBoxDescription();
				}
			
				#endregion
			
			}

			public sealed class WpfImage4Node : WPF.ImageNodeBase
			{
				#region Constructors
			
				public WpfImage4Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfImage4";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ImageDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ImageDescription();
				}
			
				#endregion
			
			}

			public sealed class SeattleToSanFranciscoAllInclusiveUiObjectNode : WPF.UiObjectNodeBase
			{
				#region Constructors
			
				public SeattleToSanFranciscoAllInclusiveUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Seattle to San Francisco,
all inclusive";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription();
				}
			
				#endregion
			
			}

			public sealed class FromUiObjectNode : WPF.UiObjectNodeBase
			{
				#region Constructors
			
				public FromUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"from";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription();
				}
			
				#endregion
			
			}

			public sealed class UiObjectNode : WPF.UiObjectNodeBase
			{
				#region Constructors
			
				public UiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"$";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription();
				}
			
				#endregion
			
			}

			public sealed class UiObject1Node : WPF.UiObjectNodeBase
			{
				#region Constructors
			
				public UiObject1Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"99";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription();
				}
			
				#endregion
			
			}

			public sealed class HelloUiObjectNode : WPF.UiObjectNodeBase
			{
				#region Constructors
			
				public HelloUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Hello";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription();
				}
			
				#endregion
			
			}

			public sealed class JohnSmithUiObjectNode : WPF.UiObjectNodeBase
			{
				#region Constructors
			
				public JohnSmithUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"John Smith";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription();
				}
			
				#endregion
			
			}

			public sealed class FlightsDataGridTableNode : WPF.TableNodeBase
			{
				#region Constructors
			
				public FlightsDataGridTableNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"flightsDataGrid";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.TableDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.TableDescription();
				}
			
				#endregion
			
			}

			public sealed class WpfObjectUiObject1Node : WPF.UiObjectNodeBase
			{
				#region Constructors
			
				public WpfObjectUiObject1Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfObject1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription();
				}
			
				#endregion
			
			}

			public sealed class WpfButton1Node : WPF.ButtonNodeBase
			{
				#region Constructors
			
				public WpfButton1Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfButton1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription();
				}
			
				#endregion
			
			}

			public sealed class ProgBarProgressBarNode : WPF.ProgressBarNodeBase
			{
				#region Constructors
			
				public ProgBarProgressBarNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"progBar";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ProgressBarDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ProgressBarDescription();
				}
			
				#endregion
			
			}

			public sealed class OKButtonNode : WPF.ButtonNodeBase
			{
				#region Constructors
			
				public OKButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"OK";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"OK",
						ObjectName = @"okButton"
					};
				}
			
				#endregion
			
			}

			public sealed class LoginFailedDialogNode : StandardWindows.DialogNodeBase
			{
				#region Constructors
			
				public LoginFailedDialogNode(AppModelBase applicationModel) : base(applicationModel)
				{
					DisplayName = @"Login Failed";
				}
			
				public LoginFailedDialogNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Login Failed";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.StdWin.DialogDescription CreateDescription()
				{
					return new HP.LFT.SDK.StdWin.DialogDescription
					{
						IsChildWindow = false,
						Text = @"Login Failed"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		#endregion

		#region Base Classes

		public class WPF
		{
			public abstract class ProgressBarNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IProgressBar, HP.LFT.SDK.WPF.ProgressBarDescription>, HP.LFT.SDK.WPF.IProgressBar
			{
				public ProgressBarNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MakeVisible()
				{
					 Concrete.MakeVisible();
				}
		
				public void ShowContextMenu()
				{
					 Concrete.ShowContextMenu();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public int Maximum
				{
					get { return Concrete.Maximum; }		
				}
		
				public int Minimum
				{
					get { return Concrete.Minimum; }		
				}
		
				public int Value
				{
					get { return Concrete.Value; }		
				}
		
				public bool CanFocus
				{
					get { return Concrete.CanFocus; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class TableNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.ITable, HP.LFT.SDK.WPF.TableDescription>, HP.LFT.SDK.WPF.ITable
			{
				public TableNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void ActivateCell(int row, int column)
				{
					 Concrete.ActivateCell(row, column);
				}
		
				public void ActivateCell(int row, string columnHeader)
				{
					 Concrete.ActivateCell(row, columnHeader);
				}
		
				public void ExtendSelect(int row)
				{
					 Concrete.ExtendSelect(row);
				}
		
				public void ExtendSelect(int row, int column)
				{
					 Concrete.ExtendSelect(row, column);
				}
		
				public void ExtendSelect(int row, string columnHeader)
				{
					 Concrete.ExtendSelect(row, columnHeader);
				}
		
				public void SelectCell(int row, int column)
				{
					 Concrete.SelectCell(row, column);
				}
		
				public void SelectCell(int row, string columnHeader)
				{
					 Concrete.SelectCell(row, columnHeader);
				}
		
				public void SelectColumn(int column)
				{
					 Concrete.SelectColumn(column);
				}
		
				public void SelectColumn(string columnHeader)
				{
					 Concrete.SelectColumn(columnHeader);
				}
		
				public void SelectRow(int row)
				{
					 Concrete.SelectRow(row);
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MakeVisible()
				{
					 Concrete.MakeVisible();
				}
		
				public void ShowContextMenu()
				{
					 Concrete.ShowContextMenu();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public string Name
				{
					get { return Concrete.Name; }		
				}
		
				public System.Collections.ObjectModel.ReadOnlyCollection<HP.LFT.SDK.WPF.ITableRow> Rows
				{
					get { return Concrete.Rows; }		
				}
		
				public bool CanFocus
				{
					get { return Concrete.CanFocus; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class UiObjectNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IUiObject, HP.LFT.SDK.WPF.UiObjectDescription>, HP.LFT.SDK.WPF.IUiObject
			{
				public UiObjectNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MakeVisible()
				{
					 Concrete.MakeVisible();
				}
		
				public void ShowContextMenu()
				{
					 Concrete.ShowContextMenu();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				#endregion
		
				#region Public Properties
		
				public string Name
				{
					get { return Concrete.Name; }		
				}
		
				public string ParentText
				{
					get { return Concrete.ParentText; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				public bool CanFocus
				{
					get { return Concrete.CanFocus; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				#endregion
			}

			public abstract class CalendarNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.ICalendar, HP.LFT.SDK.WPF.CalendarDescription>, HP.LFT.SDK.WPF.ICalendar
			{
				public CalendarNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void SetDate(System.DateTime date)
				{
					 Concrete.SetDate(date);
				}
		
				public void SetDateRange(HP.LFT.SDK.DateRange dateRange)
				{
					 Concrete.SetDateRange(dateRange);
				}
		
				public void SetDateRange(System.DateTime startDate, System.DateTime endDate)
				{
					 Concrete.SetDateRange(startDate, endDate);
				}
		
				public void SetDateRanges(HP.LFT.SDK.DateRange[] dateRanges)
				{
					 Concrete.SetDateRanges(dateRanges);
				}
		
				public void SetMonth(int month)
				{
					 Concrete.SetMonth(month);
				}
		
				public void SetYear(int year)
				{
					 Concrete.SetYear(year);
				}
		
				public HP.LFT.SDK.DateFormatType GetDateFormatType()
				{
					return Concrete.GetDateFormatType();
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MakeVisible()
				{
					 Concrete.MakeVisible();
				}
		
				public void ShowContextMenu()
				{
					 Concrete.ShowContextMenu();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public string HelpText
				{
					get { return Concrete.HelpText; }		
				}
		
				public string ParentText
				{
					get { return Concrete.ParentText; }		
				}
		
				public System.DateTime Date
				{
					get { return Concrete.Date; }		
				}
		
				public HP.LFT.SDK.DateRange[] DateRanges
				{
					get { return Concrete.DateRanges; }		
				}
		
				public bool CanFocus
				{
					get { return Concrete.CanFocus; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class ComboBoxNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IComboBox, HP.LFT.SDK.WPF.ComboBoxDescription>, HP.LFT.SDK.WPF.IComboBox
			{
				public ComboBoxNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void Select(int index)
				{
					 Concrete.Select(index);
				}
		
				public void Select(string item)
				{
					 Concrete.Select(item);
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MakeVisible()
				{
					 Concrete.MakeVisible();
				}
		
				public void ShowContextMenu()
				{
					 Concrete.ShowContextMenu();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public string HelpText
				{
					get { return Concrete.HelpText; }		
				}
		
				public string Name
				{
					get { return Concrete.Name; }		
				}
		
				public string ParentText
				{
					get { return Concrete.ParentText; }		
				}
		
				public System.Collections.ObjectModel.ReadOnlyCollection<string> Items
				{
					get { return Concrete.Items; }		
				}
		
				public string SelectedItem
				{
					get { return Concrete.SelectedItem; }		
				}
		
				public bool CanFocus
				{
					get { return Concrete.CanFocus; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class TabStripNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.ITabStrip, HP.LFT.SDK.WPF.TabStripDescription>, HP.LFT.SDK.WPF.ITabStrip
			{
				public TabStripNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void Select(string item)
				{
					 Concrete.Select(item);
				}
		
				public void Select(int index)
				{
					 Concrete.Select(index);
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MakeVisible()
				{
					 Concrete.MakeVisible();
				}
		
				public void ShowContextMenu()
				{
					 Concrete.ShowContextMenu();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public string Name
				{
					get { return Concrete.Name; }		
				}
		
				public System.Collections.ObjectModel.ReadOnlyCollection<string> Tabs
				{
					get { return Concrete.Tabs; }		
				}
		
				public string SelectedTab
				{
					get { return Concrete.SelectedTab; }		
				}
		
				public bool CanFocus
				{
					get { return Concrete.CanFocus; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class ButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IButton, HP.LFT.SDK.WPF.ButtonDescription>, HP.LFT.SDK.WPF.IButton
			{
				public ButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MakeVisible()
				{
					 Concrete.MakeVisible();
				}
		
				public void ShowContextMenu()
				{
					 Concrete.ShowContextMenu();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public string HelpText
				{
					get { return Concrete.HelpText; }		
				}
		
				public string Name
				{
					get { return Concrete.Name; }		
				}
		
				public string ParentText
				{
					get { return Concrete.ParentText; }		
				}
		
				public HP.LFT.SDK.WPF.IToggleButton ToggleButton
				{
					get { return Concrete.ToggleButton; }		
				}
		
				public bool CanFocus
				{
					get { return Concrete.CanFocus; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class ImageNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IImage, HP.LFT.SDK.WPF.ImageDescription>, HP.LFT.SDK.WPF.IImage
			{
				public ImageNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MakeVisible()
				{
					 Concrete.MakeVisible();
				}
		
				public void ShowContextMenu()
				{
					 Concrete.ShowContextMenu();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public string Name
				{
					get { return Concrete.Name; }		
				}
		
				public string ParentText
				{
					get { return Concrete.ParentText; }		
				}
		
				public bool CanFocus
				{
					get { return Concrete.CanFocus; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class EditFieldNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IEditField, HP.LFT.SDK.WPF.EditFieldDescription>, HP.LFT.SDK.WPF.IEditField
			{
				public EditFieldNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void SetText(string text)
				{
					 Concrete.SetText(text);
				}
		
				public void Select(int fromCharPos, int toCharPos)
				{
					 Concrete.Select(fromCharPos, toCharPos);
				}
		
				public void Select(int fromLine, int fromCharPos, int toLine, int toCharPos)
				{
					 Concrete.Select(fromLine, fromCharPos, toLine, toCharPos);
				}
		
				public void SetSecure(string encodedText)
				{
					 Concrete.SetSecure(encodedText);
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MakeVisible()
				{
					 Concrete.MakeVisible();
				}
		
				public void ShowContextMenu()
				{
					 Concrete.ShowContextMenu();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public bool IsReadOnly
				{
					get { return Concrete.IsReadOnly; }		
				}
		
				public string Name
				{
					get { return Concrete.Name; }		
				}
		
				public string ParentText
				{
					get { return Concrete.ParentText; }		
				}
		
				public bool CanFocus
				{
					get { return Concrete.CanFocus; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class WindowNodeBase : TopLevelObjectNodeBase<HP.LFT.SDK.WPF.IWindow, HP.LFT.SDK.WPF.WindowDescription>, HP.LFT.SDK.WPF.IWindow
			{
				public WindowNodeBase(AppModelBase applicationModel) : base(applicationModel) { }
		
				public WindowNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void Activate()
				{
					 Concrete.Activate();
				}
		
				public void Activate(HP.LFT.SDK.MouseButton button)
				{
					 Concrete.Activate(button);
				}
		
				public void Close()
				{
					 Concrete.Close();
				}
		
				public void Maximize()
				{
					 Concrete.Maximize();
				}
		
				public void Minimize()
				{
					 Concrete.Minimize();
				}
		
				public void Move(System.Drawing.Point point)
				{
					 Concrete.Move(point);
				}
		
				public void Move(int x, int y)
				{
					 Concrete.Move(x, y);
				}
		
				public void Resize(System.Drawing.Size size)
				{
					 Concrete.Resize(size);
				}
		
				public void Resize(int width, int height)
				{
					 Concrete.Resize(width, height);
				}
		
				public void Restore()
				{
					 Concrete.Restore();
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MakeVisible()
				{
					 Concrete.MakeVisible();
				}
		
				public void ShowContextMenu()
				{
					 Concrete.ShowContextMenu();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public HP.LFT.SDK.WindowState WindowState
				{
					get { return Concrete.WindowState; }		
				}
		
				public bool IsModal
				{
					get { return Concrete.IsModal; }		
				}
		
				public string ParentText
				{
					get { return Concrete.ParentText; }		
				}
		
				public bool CanFocus
				{
					get { return Concrete.CanFocus; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

		}
	
		public class StandardWindows
		{
			public abstract class DialogNodeBase : TopLevelObjectNodeBase<HP.LFT.SDK.StdWin.IDialog, HP.LFT.SDK.StdWin.DialogDescription>, HP.LFT.SDK.StdWin.IDialog
			{
				public DialogNodeBase(AppModelBase applicationModel) : base(applicationModel) { }
		
				public DialogNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void Activate()
				{
					 Concrete.Activate();
				}
		
				public void Activate(HP.LFT.SDK.MouseButton button)
				{
					 Concrete.Activate(button);
				}
		
				public void Close()
				{
					 Concrete.Close();
				}
		
				public void Maximize()
				{
					 Concrete.Maximize();
				}
		
				public void Minimize()
				{
					 Concrete.Minimize();
				}
		
				public void Move(System.Drawing.Point point)
				{
					 Concrete.Move(point);
				}
		
				public void Move(int x, int y)
				{
					 Concrete.Move(x, y);
				}
		
				public void Resize(System.Drawing.Size size)
				{
					 Concrete.Resize(size);
				}
		
				public void Resize(int width, int height)
				{
					 Concrete.Resize(width, height);
				}
		
				public void Restore()
				{
					 Concrete.Restore();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public bool IsActive
				{
					get { return Concrete.IsActive; }		
				}
		
				public bool HasBorder
				{
					get { return Concrete.HasBorder; }		
				}
		
				public bool HasCaption
				{
					get { return Concrete.HasCaption; }		
				}
		
				public bool HasSizebox
				{
					get { return Concrete.HasSizebox; }		
				}
		
				public bool HasSystemMenu
				{
					get { return Concrete.HasSystemMenu; }		
				}
		
				public bool IsOwnedWindow
				{
					get { return Concrete.IsOwnedWindow; }		
				}
		
				public bool IsChildWindow
				{
					get { return Concrete.IsChildWindow; }		
				}
		
				public bool IsMdiChildWindow
				{
					get { return Concrete.IsMdiChildWindow; }		
				}
		
				public bool IsPopupWindow
				{
					get { return Concrete.IsPopupWindow; }		
				}
		
				public bool IsToolWindow
				{
					get { return Concrete.IsToolWindow; }		
				}
		
				public bool IsMaximizable
				{
					get { return Concrete.IsMaximizable; }		
				}
		
				public bool IsMinimizable
				{
					get { return Concrete.IsMinimizable; }		
				}
		
				public HP.LFT.SDK.WindowState WindowState
				{
					get { return Concrete.WindowState; }		
				}
		
				public bool IsTopmost
				{
					get { return Concrete.IsTopmost; }		
				}
		
				public bool IsRightAligned
				{
					get { return Concrete.IsRightAligned; }		
				}
		
				public bool IsRightToLeftLayout
				{
					get { return Concrete.IsRightToLeftLayout; }		
				}
		
				public bool IsRightToLeftReading
				{
					get { return Concrete.IsRightToLeftReading; }		
				}
		
				public string AccessibleName
				{
					get { return Concrete.AccessibleName; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public HP.LFT.SDK.WindowExtendedStyles WindowExtendedStyle
				{
					get { return Concrete.WindowExtendedStyle; }		
				}
		
				public HP.LFT.SDK.WindowStyles WindowStyle
				{
					get { return Concrete.WindowStyle; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

		}
	
		#endregion
	}
}
