//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the LeanFT Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace LeanFtAppModelProject1
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the LeanFT Application Model code generator.", "12.54")]
	public class ApplicationModel1 : AppModelBase
	{
		#region Constructors

		public ApplicationModel1()
		{
			Name = @"ApplicationModel1";
			Form1YourChoiceWindow = new Form1YourChoiceWindowNode(this);
			RebuildDescriptions();
			
		}

		public ApplicationModel1(ITestObject contextTestObject)
		{
			Name = @"ApplicationModel1";
			Form1YourChoiceWindow = new Form1YourChoiceWindowNode(contextTestObject, this);
			RebuildDescriptions();
			
		}

		#endregion

		#region Test Objects
	
		public Form1YourChoiceWindowNode Form1YourChoiceWindow { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class Form1YourChoiceWindowNode : WinForms.WindowNodeBase
		{
			#region Constructors
		
			public Form1YourChoiceWindowNode(AppModelBase applicationModel) : base(applicationModel)
			{
				Form2EnglishLanguageWindow = new Form2EnglishLanguageWindowNode(this, applicationModel);
				DisplayName = @"Form1 : Your choice";
			}
		
			public Form1YourChoiceWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				Form2EnglishLanguageWindow = new Form2EnglishLanguageWindowNode(this, applicationModel);
				DisplayName = @"Form1 : Your choice";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.WinForms.WindowDescription CreateDescription()
			{
				return new HP.LFT.SDK.WinForms.WindowDescription
				{
					IsChildWindow = false,
					IsOwnedWindow = false,
					ObjectName = @"Form1",
					WindowTitleRegExp = @"Form1 : Your choice"
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public Form2EnglishLanguageWindowNode Form2EnglishLanguageWindow { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class Form2EnglishLanguageWindowNode : WinForms.WindowNodeBase
			{
				#region Constructors
			
				public Form2EnglishLanguageWindowNode(AppModelBase applicationModel) : base(applicationModel)
				{
					MSFlexGridWndClassUiObject = new MSFlexGridWndClassUiObjectNode(this, applicationModel);
					MkGrid1UiObject = new MkGrid1UiObjectNode(this, applicationModel);
					PicAboutUiObject = new PicAboutUiObjectNode(this, applicationModel);
					DisplayName = @"Form2 : English language";
				}
			
				public Form2EnglishLanguageWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					MSFlexGridWndClassUiObject = new MSFlexGridWndClassUiObjectNode(this, applicationModel);
					MkGrid1UiObject = new MkGrid1UiObjectNode(this, applicationModel);
					PicAboutUiObject = new PicAboutUiObjectNode(this, applicationModel);
					DisplayName = @"Form2 : English language";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WinForms.WindowDescription CreateDescription()
				{
					return new HP.LFT.SDK.WinForms.WindowDescription
					{
						IsChildWindow = false,
						IsOwnedWindow = true,
						ObjectName = @"Form2",
						WindowTitleRegExp = @"Form2 : English language"
					};
				}
			
				#endregion
			
				#region Test Objects
			
				public MSFlexGridWndClassUiObjectNode MSFlexGridWndClassUiObject { get; private set; }
				public MkGrid1UiObjectNode MkGrid1UiObject { get; private set; }
				public PicAboutUiObjectNode PicAboutUiObject { get; private set; }
			
				#endregion
			
				#region Inner Classes
			
				public sealed class MSFlexGridWndClassUiObjectNode : StandardWindows.UiObjectNodeBase
				{
					#region Constructors
				
					public MSFlexGridWndClassUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"MSFlexGridWndClass";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.StdWin.UiObjectDescription CreateDescription()
					{
						return new HP.LFT.SDK.StdWin.UiObjectDescription
						{
							WindowClassRegExp = @"MSFlexGridWndClass"
						};
					}
				
					#endregion
				
				}

				public sealed class MkGrid1UiObjectNode : WinForms.UiObjectNodeBase
				{
					#region Constructors
				
					public MkGrid1UiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"mkGrid1";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.UiObjectDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.UiObjectDescription();
					}
				
					#endregion
				
				}

				public sealed class PicAboutUiObjectNode : WinForms.UiObjectNodeBase
				{
					#region Constructors
				
					public PicAboutUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"picAbout";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.UiObjectDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.UiObjectDescription();
					}
				
					#endregion
				
				}

				#endregion
			}

			#endregion
		}

		#endregion

		#region Base Classes

		public class WinForms
		{
			public abstract class UiObjectNodeBase : AppModelNodeBase<HP.LFT.SDK.WinForms.IUiObject, HP.LFT.SDK.WinForms.UiObjectDescription>, HP.LFT.SDK.WinForms.IUiObject
			{
				public UiObjectNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				public void FireEvent(string type, params object[] args)
				{
					 Concrete.FireEvent(type, args);
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public void Scroll(HP.LFT.SDK.ScrollOrientation orientation, HP.LFT.SDK.ScrollType type, int value = 1)
				{
					 Concrete.Scroll(orientation, type, value);
				}
		
				#endregion
		
				#region Public Properties
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string ErrorText
				{
					get { return Concrete.ErrorText; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				public bool IsChildWindow
				{
					get { return Concrete.IsChildWindow; }		
				}
		
				public bool IsOwnedWindow
				{
					get { return Concrete.IsOwnedWindow; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				#endregion
			}

			public abstract class WindowNodeBase : TopLevelObjectNodeBase<HP.LFT.SDK.WinForms.IWindow, HP.LFT.SDK.WinForms.WindowDescription>, HP.LFT.SDK.WinForms.IWindow
			{
				public WindowNodeBase(AppModelBase applicationModel) : base(applicationModel) { }
		
				public WindowNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void Activate()
				{
					 Concrete.Activate();
				}
		
				public void Activate(HP.LFT.SDK.MouseButton button)
				{
					 Concrete.Activate(button);
				}
		
				public void Close()
				{
					 Concrete.Close();
				}
		
				public void Maximize()
				{
					 Concrete.Maximize();
				}
		
				public void Minimize()
				{
					 Concrete.Minimize();
				}
		
				public void Move(System.Drawing.Point point)
				{
					 Concrete.Move(point);
				}
		
				public void Move(int x, int y)
				{
					 Concrete.Move(x, y);
				}
		
				public void Resize(System.Drawing.Size size)
				{
					 Concrete.Resize(size);
				}
		
				public void Resize(int width, int height)
				{
					 Concrete.Resize(width, height);
				}
		
				public void Restore()
				{
					 Concrete.Restore();
				}
		
				public void FireEvent(string type, params object[] args)
				{
					 Concrete.FireEvent(type, args);
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public HP.LFT.SDK.WindowState WindowState
				{
					get { return Concrete.WindowState; }		
				}
		
				public bool IsActive
				{
					get { return Concrete.IsActive; }		
				}
		
				public bool HasBorder
				{
					get { return Concrete.HasBorder; }		
				}
		
				public bool HasCaption
				{
					get { return Concrete.HasCaption; }		
				}
		
				public bool HasSizebox
				{
					get { return Concrete.HasSizebox; }		
				}
		
				public bool HasSystemMenu
				{
					get { return Concrete.HasSystemMenu; }		
				}
		
				public bool IsMdiChildWindow
				{
					get { return Concrete.IsMdiChildWindow; }		
				}
		
				public bool IsPopupWindow
				{
					get { return Concrete.IsPopupWindow; }		
				}
		
				public bool IsToolWindow
				{
					get { return Concrete.IsToolWindow; }		
				}
		
				public bool IsMaximizable
				{
					get { return Concrete.IsMaximizable; }		
				}
		
				public bool IsMinimizable
				{
					get { return Concrete.IsMinimizable; }		
				}
		
				public bool IsTopmost
				{
					get { return Concrete.IsTopmost; }		
				}
		
				public bool IsChildWindow
				{
					get { return Concrete.IsChildWindow; }		
				}
		
				public bool IsOwnedWindow
				{
					get { return Concrete.IsOwnedWindow; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

		}
	
		public class StandardWindows
		{
			public abstract class UiObjectNodeBase : AppModelNodeBase<HP.LFT.SDK.StdWin.IUiObject, HP.LFT.SDK.StdWin.UiObjectDescription>, HP.LFT.SDK.StdWin.IUiObject
			{
				public UiObjectNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public void Scroll(HP.LFT.SDK.ScrollOrientation orientation, HP.LFT.SDK.ScrollType type, int value = 1)
				{
					 Concrete.Scroll(orientation, type, value);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public bool IsRightAligned
				{
					get { return Concrete.IsRightAligned; }		
				}
		
				public bool IsRightToLeftLayout
				{
					get { return Concrete.IsRightToLeftLayout; }		
				}
		
				public bool IsRightToLeftReading
				{
					get { return Concrete.IsRightToLeftReading; }		
				}
		
				public string AccessibleName
				{
					get { return Concrete.AccessibleName; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public HP.LFT.SDK.WindowExtendedStyles WindowExtendedStyle
				{
					get { return Concrete.WindowExtendedStyle; }		
				}
		
				public HP.LFT.SDK.WindowStyles WindowStyle
				{
					get { return Concrete.WindowStyle; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public HP.LFT.SDK.ScrollInfo HorizontalScroll
				{
					get { return Concrete.HorizontalScroll; }		
				}
		
				public HP.LFT.SDK.ScrollInfo VerticalScroll
				{
					get { return Concrete.VerticalScroll; }		
				}
		
				public HP.LFT.SDK.VerticalScrollPosition VerticalScrollPosition
				{
					get { return Concrete.VerticalScrollPosition; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

		}
	
		#endregion
	}
}
